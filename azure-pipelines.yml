trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

resources:
  containers:
    - container: postgres
      image: postgres@sha256:3a1217522e1da37f28a94bbb02eebe3ced4c28131da14799b710814cb959c6df # postgres:12-alpine
      ports:
        - 5432:5432
      env:
        POSTGRES_DB: rawdata_converter_boss
        POSTGRES_USER: boss
        POSTGRES_PASSWORD: bossman


jobs:

  - job: testAndBuild
    displayName: 'Run tests and build maven artifacts'
    container: maven@sha256:66ce0cfd7a20d91c09ab94a03b3e7b110423c918ae7f72d0958d8e838857524c # maven:3.6.3-adoptopenjdk-14
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/')) # Always, except from when a tag is pushed
    services:
      postgres: postgres
    steps:

      #Cache maven artifacts  
      - task: Cache@2
        displayName: Cache Maven local repo
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(MAVEN_CACHE_FOLDER)

      #Authenticate with maven
      - task: MavenAuthenticate@0
        displayName: 'Authenticate'
        inputs:
          mavenServiceConnections: 'mvnSsbBipPublic, mvnSsbBipReleases, mvnSsbBipSnapshots'

      - bash: |
          ls -latr src/test/resources
        displayName: 'Debug'

      #Test and build
      - task: Maven@3
        displayName: 'Test and build'
        inputs:
          goals: 'verify test'
          options: '-P ssb-bip --batch-mode -Dmicronaut.environments=pipeline'
          mavenOptions: '$(MAVEN_OPTS)'

      # Publish pipeline artifact
      - publish: target
        displayName: 'Publish artifact to pipeline'
        artifact: target

  - job: buildAndPushDockerImage
    dependsOn: testAndBuild
    displayName: 'Build and push docker image'
    steps:

      # Download pipeline artifact
      - download: current
        displayName: 'Download pipeline artifact'
        patterns: |
          **/rawdata-converter-*.jar
          **/logback*.xml
        artifact: target

      #Copy pipeline artifact into working directory
      - bash: |
          ls -latr $(Pipeline.Workspace)/target
          cp -r $(Pipeline.Workspace)/target .
          ls -latr target
        displayName: 'Copy pipeline artifact into working directory'

      #Docker login
      - task: Docker@2
        displayName: 'Docker login'
        inputs:
          command: 'login'
          containerRegistry: 'gcrServiceConnection'

      #Docker build and push
      - task: Docker@2
        displayName: 'Build and push Docker image'
        inputs:
          containerRegistry: 'gcrServiceConnection'
          repository: 'prod-bip/ssb/dapla/rawdata-converter-boss'
          command: 'buildAndPush'
          tags: '$(Build.SourceVersion)'

  - job: promoteToProduction
    displayName: 'Tag production image'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/') # Whenever a tag is pushed
    steps:

      # Download GCR credentials
      - task: DownloadSecureFile@1
        name: gcrJsonKey
        displayName: 'Download GCR credentials'
        inputs:
          secureFile: 'gcr-key.json'

      - bash: |
          regex="refs/tags/(.*)"
          [[ $(Build.SourceBranch) =~ $regex ]]
          TAG="${BASH_REMATCH[1]}"
          echo "Tagging image eu.gcr.io/prod-bip/ssb/dapla/rawdata-converter-boss:$(Build.SourceVersion) with $TAG"
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin https://eu.gcr.io
          docker pull eu.gcr.io/prod-bip/ssb/dapla/rawdata-converter-boss:$(Build.SourceVersion)
          docker tag eu.gcr.io/prod-bip/ssb/dapla/rawdata-converter-boss:$(Build.SourceVersion) eu.gcr.io/prod-bip/ssb/dapla/rawdata-converter-boss:$TAG
          docker push eu.gcr.io/prod-bip/ssb/dapla/rawdata-converter-boss:$TAG
        displayName: 'Tag production image'
